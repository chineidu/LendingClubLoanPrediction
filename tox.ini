# Tox is a generic virtualenv management and test command line tool. Its goal is to
# standardize testing in Python. 

# Using Tox we can (on multiple operating systems):
# + Eliminate PYTHONPATH challenges when running scripts/tests
# + Eliminate virtualenv setup confusion
# + Streamline steps such as model training, model publishing


# github_env: tox_env   
# e.g  3.8=> github_python_env and test=> tox_env
# [gh-actions]
# python =
#   3.8: test
#   3.9: test, lint


[tox]
envlist = coverage, test_code, typechecks, lint, stylechecks
skipsdist = True

[gh-actions]
python =
    3.9: test_code, lint, stylechecks
    3.10: test_code, lint, stylechecks

[testenv]
install_command = pip install {opts} {packages}
commands =
    coverage report -m
	pytest -vv {posargs:tests/}


[testenv:coverage]
deps =
	-r{toxinidir}/requirements/test_requirements.txt

setenv =
	PYTHONPATH = {toxinidir}
	PYTHONHASHSEED=0

commands=
	python classification_model/train_pipeline.py
	coverage report -m 
	pytest \
	-s \
	-vv \
	{posargs:tests/}


[testenv:test_code]
envdir = {toxworkdir}/coverage
deps =
	{[testenv:coverage]deps}

setenv =
	{[testenv:coverage]setenv}
	
commands=
	python classification_model/predict.py
	coverage report -m
	pytest -vv {posargs:tests/}


[testenv:train]
envdir = {toxworkdir}/coverage
deps =
	{[testenv:coverage]deps}

setenv =
	{[testenv:coverage]setenv}

commands=
	python classification_model/train_pipeline.py


[testenv:typechecks]
envdir = {toxworkdir}/coverage

deps =
	{[testenv:coverage]deps}

commands = {posargs:mypy classification_model}


[testenv:stylechecks]
envdir = {toxworkdir}/coverage

deps =
	{[testenv:coverage]deps}

commands = {posargs:flake8 classification_model tests}


[testenv:lint]
envdir = {toxworkdir}/coverage

deps =
	{[testenv:coverage]deps}

commands =
	isort classification_model tests
	black classification_model tests

[flake8]
exclude = .git,env
max-line-length = 100
